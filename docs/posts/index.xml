<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Inbits Blog</title>
    <link>https://inbits-sec.com/posts/</link>
    <description>Recent content in Posts on Inbits Blog</description>
    <image>
      <url>https://inbits-sec.com/</url>
      <link>https://inbits-sec.com/</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Sat, 28 Dec 2024 12:32:40 +0000</lastBuildDate><atom:link href="https://inbits-sec.com/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CVE-2024-11616: Netskope EPDLP Double-Fetch</title>
      <link>https://inbits-sec.com/posts/cve-2024-11616-netskope/</link>
      <pubDate>Sat, 28 Dec 2024 12:32:40 +0000</pubDate>
      
      <guid>https://inbits-sec.com/posts/cve-2024-11616-netskope/</guid>
      <description>Around a year ago, I decided to orient myself more keenly towards vulnerability research. It had become apparent to me that it was the area of offensive security, and the process, that I had enjoyed dipping my toes into the most. I spent much of the last year shoring up fundamentals - finishing Ret2Systems&amp;rsquo; excellent Wargames, a bunch of OST2 modules, and the Trainsec Kernel Programming modules - before jumping into some real world targets and starting to develop my workflow.</description>
    </item>
    
    <item>
      <title>New Tool: CSSHide - Hiding in plain style</title>
      <link>https://inbits-sec.com/posts/new-tool-csshide/</link>
      <pubDate>Tue, 05 Sep 2023 15:58:43 +0100</pubDate>
      
      <guid>https://inbits-sec.com/posts/new-tool-csshide/</guid>
      <description>I&amp;rsquo;ve recently been working on a small fun obfuscation tool called CSSHide, which can encode a payload in the colour values of a CSS file. This was inspired by the payload encoding modules featured at Maldev Academy, that include encoding payloads as IP addresses, UUIDs, and MAC addresses.
Why CSS files? The purpose of the tool is to help facilitate blending in with common browser traffic, which will usually include frequent requests for CSS files that the browser will then use to format the layout of a webpage.</description>
    </item>
    
    <item>
      <title>OpenFileMapping and KnownDlls</title>
      <link>https://inbits-sec.com/posts/openfilemapping-and-knowndlls/</link>
      <pubDate>Thu, 17 Aug 2023 16:02:16 +0100</pubDate>
      
      <guid>https://inbits-sec.com/posts/openfilemapping-and-knowndlls/</guid>
      <description>A common method of unhooking user-land API hooks is to load a fresh copy of NTDLL from KnownDlls, a special object directory that&amp;rsquo;s used to essentially cache commonly used system DLLs. We can use WinObj to view the Object Manager namespace, where we can see the KnownDlls directory, and the mapped sections it contains for each system DLL.
Whilst working through the excellent Maldev Academy course material, it was pointed out that you can&amp;rsquo;t seem to use OpenFileMapping to retrieve a handle to the KnownDlls directory, despite it&amp;rsquo;s purpose being to open named file mapping objects.</description>
    </item>
    
    <item>
      <title>EDR Unhooking: Patching Falcon hooks without VirtualProtect</title>
      <link>https://inbits-sec.com/posts/in-memory-unhooking/</link>
      <pubDate>Fri, 07 Jul 2023 23:52:33 +0100</pubDate>
      
      <guid>https://inbits-sec.com/posts/in-memory-unhooking/</guid>
      <description>I recently encountered a blog post by Signal Labs about using in-memory disassembly to perform EDR unhooking. In the post, the authors outline a technique whereby hook jumps implemented by Sophos are followed in order to find the relocated original syscall stub. This is first done for NtAllocateVirtualMemory, which the authors unhook by replacing the EDR&amp;rsquo;s hook with their own hook pointing to the relocated stub. Once they&amp;rsquo;ve unhooked this function, it can be leveraged for the further unhooking of other functions.</description>
    </item>
    
    <item>
      <title>My OSCP Preparation Tips</title>
      <link>https://inbits-sec.com/posts/oscp-prep-tips/</link>
      <pubDate>Wed, 25 May 2022 12:32:02 +0100</pubDate>
      
      <guid>https://inbits-sec.com/posts/oscp-prep-tips/</guid>
      <description>It’s almost a bit of a cliché after passing the OSCP to do a writeup about the journey it took to get there - but I’m embracing the cliché for two reasons:
When I was preparing I encountered tips and suggestions in blog posts that had a huge impact on the rest of my preparation. Approaching the OSCP with experience as a Programmer/Software Engineer can result in slightly different prioritisation during preparation, and anecdotally it’s touched on in fewer guides because it’s not the common path.</description>
    </item>
    
  </channel>
</rss>
